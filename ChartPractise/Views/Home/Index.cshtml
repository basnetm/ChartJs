@model ChartPractise.Models.MyModel

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-primary" })
</p>

<div class="chart-container" style="position: relative; height:400px; width:800px;">
    <canvas id="myChart"></canvas>
</div>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>
    <script>
        $(document).ready(function () {
            var jsonData = @Html.Raw(Json.Encode(Model.MyTransactions));
            var labels = jsonData.map(function (item) {
                var date = new Date(parseInt(item.TransactionDate.substr(6)));
                var formattedDate = date.toLocaleDateString(); // Adjust format as needed
                return formattedDate;
            });
            var data = jsonData.map(function (item) { return item.Amount; });

            // Calculate linear regression
            function linearRegression(y, x) {
                var sumX = 0;
                var sumY = 0;
                var sumXY = 0;
                var sumXX = 0;
                var n = y.length;

                for (var i = 0; i < n; i++) {
                    sumX += x[i];
                    sumY += y[i];
                    sumXY += (x[i] * y[i]);
                    sumXX += (x[i] * x[i]);
                }

                var slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
                var intercept = (sumY / n) - (slope * sumX / n);
                return [intercept, slope];
            }

            // Prepare data for linear regression
            var xValues = labels.map((_, index) => index + 1); // Use 1-based indices
            var yValues = data;

            // Calculate linear regression line
            var [intercept, slope] = linearRegression(yValues, xValues);

            // Generate projection data
            var projectionData = [];
            var combinedLabels = [...labels];

            // Extend projection for future dates
            var futureLength = 10; // Number of future data points
            for (var i = 0; i < futureLength; i++) {
                var nextDate = new Date(new Date(labels[labels.length - 1]).getTime() + (i + 1) * 24 * 60 * 60 * 1000).toLocaleDateString();
                combinedLabels.push(nextDate);
                projectionData.push(intercept + slope * (labels.length + i + 1));
            }

            var ctx = document.getElementById('myChart').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: combinedLabels,
                    datasets: [{
                        label: 'Actual Amount',
                        data: data,
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1,
                        fill: false
                    }, {
                        label: 'Projection',
                        data: Array(data.length).fill(null).concat(projectionData),
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1,
                        fill: false,
                        type: 'bar',
                        borderDash: [5, 5]
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });
        });
    </script>
}
